{"version":2,"kind":"Notebook","sha256":"10c6ac35e1c251e1748c59341e7cae0a109e3773818bc009d612630525265fe4","slug":"notebooks.model","location":"/notebooks/Model.ipynb","dependencies":[],"frontmatter":{"title":"Model Setup","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"nma","language":"python"},"authors":[{"nameParsed":{"literal":"Nirmal Alex, Matthew Lynne","given":"Matthew Lynne","family":"Nirmal Alex"},"name":"Nirmal Alex, Matthew Lynne","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/ProjectPythia/ml-hurricane-intensity","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/ProjectPythia/ml-hurricane-intensity/blob/main/notebooks/Model.ipynb","exports":[{"format":"ipynb","filename":"Model.ipynb","url":"/ml-hurricane-intensity/build/Model-d29f9a8d70b48633e06e5a2d4c3b7360.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Zziem7HGkA"}],"key":"hoWfKfmwzT"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vyoVTkXSU5"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"GDd0XVMv5s"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"This notebook is for setting up a simple CNN-LSTM model to predict event-wise hurricane intensity using the prreproceesed data from the ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Cptkb8sr82"},{"type":"inlineCode","value":"era5_preprocessing.ipynb","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"rsg8W8yDMG"},{"type":"text","value":" notebook.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"tieVvtw3nQ"}],"key":"ZbtA3e5lc3"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"strong","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Data Preparation","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"LL44HGW08B"}],"key":"PIOtOlxF4i"},{"type":"text","value":": Load and preprocess the data.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"DjqMmVYiq1"}],"key":"VJUiPortBS"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Model Definition","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"NkhspmFTKJ"}],"key":"LpLKQ44akk"},{"type":"text","value":": Define a CNN-LSTM model.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"fowPMTGnPe"}],"key":"hbbRJPAQFc"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Model Training","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"gtSYu0wSB2"}],"key":"pjDsXhe5WZ"},{"type":"text","value":": Train the model on the prepared data.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"OxebzuvDdh"}],"key":"hllm9W5NcE"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Model Evaluation","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"RR0LRwa07B"}],"key":"Gs90WZTsQo"},{"type":"text","value":": Evaluate the modelâ€™s performance on test data.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"yhWmJnCyOI"}],"key":"IN5dJTIEgz"}],"key":"MNyKw3zOyB"}],"key":"hOSOVlvRrx"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qhW9Nfu2i5"}],"key":"ZPORNu2zC7"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZkadxOdpw5"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"npyrefQ1kY"}],"key":"FTL7Od6tcZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport xarray as xr\n\n\nfrom sklearn.preprocessing import MinMaxScaler\n\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Flatten\nfrom keras.layers import Dense, Flatten, Conv2D\nfrom tensorflow.keras.layers import  TimeDistributed, LSTM\nimport visualkeras\nimport tensorflow as tf\n","key":"wnIx9SxGb7"},{"type":"output","id":"yk0rh_arFg6mxqGriE-LX","data":[],"key":"r6ngi0wu8q"}],"key":"fEn9dBgVtD"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load the hurricane wise variable dataset","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nhMvKwroeH"}],"identifier":"load-the-hurricane-wise-variable-dataset","label":"Load the hurricane wise variable dataset","html_id":"load-the-hurricane-wise-variable-dataset","implicit":true,"key":"fpN8l4jkZs"}],"key":"r3epiPXpJQ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In this section,we will load the preprocessed dataset containing hurricane-wise environmental variables. This dataset is essential for training our CNN-LSTM model to predict hurricane intensity.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vne01EZlSr"}],"key":"FAV8Bo4Tyz"}],"key":"p7DYyorqzm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# load the preprocessed dataset\nmodel_input = xr.open_dataset('../test_folder/input_predictands.nc')\nmodel_input\n","key":"LlKCsm2eTt"},{"type":"output","id":"NcYlFfF9ekZ5kIBpAQuCc","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mValueError\u001b[39m                                Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[2]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;66;03m# load the preprocessed dataset\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m model_input = \u001b[43mxr\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_dataset\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43m../test_folder/input_predictands.nc\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[32m      3\u001b[39m model_input\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-dev/lib/python3.12/site-packages/xarray/backends/api.py:696\u001b[39m, in \u001b[36mopen_dataset\u001b[39m\u001b[34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, create_default_indexes, inline_array, chunked_array_type, from_array_kwargs, backend_kwargs, **kwargs)\u001b[39m\n\u001b[32m    693\u001b[39m     kwargs.update(backend_kwargs)\n\u001b[32m    695\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m engine \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m696\u001b[39m     engine = \u001b[43mplugins\u001b[49m\u001b[43m.\u001b[49m\u001b[43mguess_engine\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    698\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m from_array_kwargs \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    699\u001b[39m     from_array_kwargs = {}\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-dev/lib/python3.12/site-packages/xarray/backends/plugins.py:194\u001b[39m, in \u001b[36mguess_engine\u001b[39m\u001b[34m(store_spec)\u001b[39m\n\u001b[32m    186\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    187\u001b[39m     error_msg = (\n\u001b[32m    188\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mfound the following matches with the input file in xarray\u001b[39m\u001b[33m'\u001b[39m\u001b[33ms IO \u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    189\u001b[39m         \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mbackends: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcompatible_engines\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m. But their dependencies may not be installed, see:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33m\"\u001b[39m\n\u001b[32m    190\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mhttps://docs.xarray.dev/en/stable/user-guide/io.html \u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33m\"\u001b[39m\n\u001b[32m    191\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    192\u001b[39m     )\n\u001b[32m--> \u001b[39m\u001b[32m194\u001b[39m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(error_msg)\n\n\u001b[31mValueError\u001b[39m: did not find a match in any of xarray's currently installed IO backends ['netcdf4', 'h5netcdf', 'scipy']. Consider explicitly selecting one of the installed engines via the ``engine`` parameter, or installing additional IO dependencies, see:\nhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html\nhttps://docs.xarray.dev/en/stable/user-guide/io.html","ename":"ValueError","evalue":"did not find a match in any of xarray's currently installed IO backends ['netcdf4', 'h5netcdf', 'scipy']. Consider explicitly selecting one of the installed engines via the ``engine`` parameter, or installing additional IO dependencies, see:\nhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html\nhttps://docs.xarray.dev/en/stable/user-guide/io.html"}],"key":"KtQhHX2Z6o"}],"key":"l351ASzSsq"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Input Data prerpocessing steps","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gqQxCfmcUI"}],"identifier":"input-data-prerpocessing-steps","label":"Input Data prerpocessing steps","html_id":"input-data-prerpocessing-steps","implicit":true,"key":"WRAy1tM0KS"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Nan and padded values will be set to zero","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"dSmpPzVAAG"}],"key":"J86QtseZqO"},{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Set the train and test split","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"p6MGz3tw0S"}],"key":"KqKTE6KaHu"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"normalize using the MinMaxScaler","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"IeIp2FXK90"}],"key":"fu7wPLcfbh"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"random shuffle for generalization","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"kwLxgvOKeC"}],"key":"J1rJPdmPYt"}],"key":"OQITszIIPi"}],"key":"q00ZDsnKBF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# remove the nan values and set it \nmodel_input = model_input.fillna(0)\n\n# selecting the predictors (X) and expanding the dimensions\n\nX_data = model_input[['u','v','vo','speed_shear','sp','r','cor_params']].to_array(dim='variable')\n\nprint(f'Dimensions are , features: {X_data.shape[0]}, Event: {X_data.shape[1]}, time(lead): {X_data.shape[2]}, lat: {X_data.shape[3]}, lon: {X_data.shape[4]}')\n\nX_data = X_data.transpose('id', 'lead', 'y','x','variable')\n\nprint(f'X_data dimensions are: Event: {X_data.shape[0]}, time(lead): {X_data.shape[1]}, lat: {X_data.shape[2]}, lon: {X_data.shape[3]}, features: {X_data.shape[4]}')","key":"k04Pb1vsbL"},{"type":"output","id":"rdGoqc6oshBNLnU1-SWQF","data":[],"key":"cvo4xXidRn"}],"key":"EgDwaWuuZo"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# selecting the target variable (y)\nY_data = model_input['target']\n\n# expanded the dimensions of Y_data to match the expected input shape for the model\n#Y_data = np.expand_dims(Y_data, axis=-1)\n\nprint(f'Target dimensions are: Event: {Y_data.shape[0]}, time(lead): {Y_data.shape[1]}')","key":"XJL1HgII9p"},{"type":"output","id":"Y92N8Cgu3Hv8-P7IPZfRF","data":[],"key":"dizXLTrU46"}],"key":"ExVY8f8CWa"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"## 80% train and 20% test split\n\n## random shuffled the events and split the data into training and testing sets\nX_train , X_test , Y_train, Y_test = train_test_split(X_data, Y_data, test_size=0.2, random_state=1)\n\n\nX_train_data = X_train.values\nX_test_data = X_test.values\nY_train_data = Y_train.values\nY_test_data = Y_test.values\n\n\n","key":"rpxWM2FxzS"},{"type":"output","id":"q4d_wXdShW_qyX1ndaey7","data":[],"key":"BGHswADIHH"}],"key":"ZIUvAnSW8n"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"x_train_scaler = MinMaxScaler()\nx_test_scaler = MinMaxScaler()\n\ny_train_scaler = MinMaxScaler()\ny_test_scaler = MinMaxScaler()","key":"xBFRIn7EzT"},{"type":"output","id":"9W2vRf8UnXYXK-OnNhNOQ","data":[],"key":"kIc02zRPWT"}],"key":"b7mDf53W0f"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"X_train_scaled = x_train_scaler.fit_transform(X_train_data.reshape(-1, X_train_data.shape[-1])).reshape(X_train_data.shape)\nY_train_scaled = y_train_scaler.fit_transform(Y_train_data.reshape(-1,1)).reshape(Y_train_data.shape)\n\nX_test_scaled = x_test_scaler.fit_transform(X_test_data.reshape(-1, X_test_data.shape[-1])).reshape(X_test_data.shape)\nY_test_scaled = y_test_scaler.fit_transform(Y_test_data.reshape(-1,1)).reshape(Y_test_data.shape)\n","key":"eDmTl3UOFH"},{"type":"output","id":"ptE6iv_RcuMFJoBX_WlQa","data":[],"key":"GmGta9dzuG"}],"key":"RvJB98QBPM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def masked_mse(y_true, y_pred):\n    mask = tf.cast(tf.not_equal(y_true, 0.0), tf.float32)\n    squared_error = tf.square(y_true - y_pred)\n    masked_loss = tf.reduce_sum(squared_error * mask) / (tf.reduce_sum(mask) + 1e-6)\n    return masked_loss\n\nmodel = Sequential()\nmodel.add(TimeDistributed(\n    Conv2D(16, (3, 3), activation='relu', padding='same'),\n    input_shape=(140, 5, 5, 7)\n))\nmodel.add(TimeDistributed(Flatten()))\nmodel.add(LSTM(64, return_sequences=True))  # <--- important!\nmodel.add(TimeDistributed(Dense(1)))\n\nmodel.summary()\n","key":"Ukfg0ZcZBR"},{"type":"output","id":"balV34PWppmHBU8io-psf","data":[],"key":"n5PwiuQIAu"}],"key":"xjubftEwI9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"visualkeras.layered_view(model,scale_xy=0.6)\n","key":"g30AyBztCv"},{"type":"output","id":"QzEYyfdHvqCJnLmzLi2Pl","data":[],"key":"AYLhAf6sHW"}],"key":"pOWIyHlHVr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"model.compile(optimizer='adam', metrics=['mae'] , loss=masked_mse)\n\nmodel.fit(X_train_scaled, Y_train_scaled, epochs=100, batch_size=32, validation_split=0.2)","key":"MDomrQ5h01"},{"type":"output","id":"lI8ABirBA-wY8lmims4L3","data":[],"key":"LZRwQHFBRb"}],"key":"cTKUN7e9q4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"predict_x = model.predict(X_test_scaled)","key":"kAl99fXM0i"},{"type":"output","id":"D4JcLCx2Vtbrq6v5z_tSz","data":[],"key":"kADgP3EiNd"}],"key":"Am7tFI9v01"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def invert_add_meta(data,scalar,xr_data):\n    data = scalar.inverse_transform(data.reshape(-1 ,1)).reshape(xr_data.shape)\n    added_meta = xr.DataArray(data, coords=xr_data.coords, dims=xr_data.dims)\n    return added_meta\n\npredicted_wind_speed = invert_add_meta(predict_x, y_test_scaler, Y_test)\n\nobserved_wind_speeds = Y_test\n\nfinal_dset = predicted_wind_speed.to_dataset(name='predicted_wind_speed')\nfinal_dset['observed_wind_speed'] = observed_wind_speeds\n                                                    \nfinal_dft = final_dset.to_dataframe().reset_index()\n\n# set 0.0 as nan in observed_wind_speed\nfinal_dft['observed_wind_speed'] = final_dft['observed_wind_speed'].replace(0.0, np.nan)\n\n# whenever the predicted_wind_speed is nan, sdrop the entire row\n\nfinal_dft = final_dft.dropna(how='any',axis=0)\n\nfinal_pivot_col = final_dft.drop(columns=['time','level'])","key":"VqFdYYidC6"},{"type":"output","id":"THX16KJ0lcAtCMi4N73iH","data":[],"key":"B47ARmlqwv"}],"key":"ORuZWZvsq6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"final_pivot_col","key":"vNoEh7Cadp"},{"type":"output","id":"LjmFhi7Op0YUk57mL8ZAs","data":[],"key":"jUUFDTxYtV"}],"key":"DfAwGrOrRi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import seaborn as sbs \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Define two different palettes\npalette1 = sns.color_palette(\"Reds\")           # for predicted\npalette2 = sns.color_palette(\"Blues\")            # for observed\n\nfig,ax = plt.subplots(figsize=(12, 6))\n# First lineplot (predicted) with palette1\nsns.lineplot(\n    data=final_pivot_col,\n    x='lead',\n    y='predicted_wind_speed',\n    hue='id',\n    style='id',\n    markers=True,\n    dashes=False,\n    palette=palette1,\n    legend='brief'\n,ax=ax)\n\n# Second lineplot (observed) with palette2\nsns.lineplot(\n    data=final_pivot_col,\n    x='lead',\n    y='observed_wind_speed',\n    hue='id',\n    style='id',\n    markers=True,\n    dashes=False,\n    palette=palette2,\n    legend='brief'\n,ax=ax)\nplt.legend('')\n\n\n\n# add H to the end of xticks\nxticks = ax.get_xticks()\nax.set_xticks(xticks)\nax.set_xticklabels([f'{int(tick)}H' for tick in xticks])\nax.set_xlim(0, 500)\n\n\nax.set_xlabel('Lead (Hours)',fontsize=15)\nax.set_title('Predicted (Reds) vs Observed Wind Speed (Blues)',fontsize=18)\n\nax.set_ylabel('Wind Speed (m/s)',fontsize=15)\n#sbs.lineplot(data=final_pivot_col, x='lead', y='observed_wind_speed', hue='id', style='id', markers=True, dashes=False)","key":"Bp3BBOFm4u"},{"type":"output","id":"r8BAyDMHurFSFQ0lmZ8JC","data":[],"key":"rjgAD4IiPi"}],"key":"IJ5ylH6qRm"}],"key":"cFpID6gy8l"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"ERA5 Data Preprocessing","url":"/notebooks/era5-preprocessing","group":"Data Preprocessing"}}},"domain":"http://localhost:3000"}