{"version":2,"kind":"Notebook","sha256":"a9d4c139d067a2ba94a37a1ac1d3a945ca3a1980b839d1ee33230a6c5f13ceb0","slug":"notebooks.ibtrack-preprocessing","location":"/notebooks/ibtrack_preprocessing.ipynb","dependencies":[],"frontmatter":{"title":"Preprocess IBTRACK data","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"nma","language":"python"},"authors":[{"nameParsed":{"literal":"Nirmal Alex, Matthew Lynne","given":"Matthew Lynne","family":"Nirmal Alex"},"name":"Nirmal Alex, Matthew Lynne","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/ProjectPythia/ml-hurricane-intensity","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/ProjectPythia/ml-hurricane-intensity/blob/main/notebooks/ibtrack_preprocessing.ipynb","thumbnail":"/ml-hurricane-intensity/build/2-Scenarios-used-by--6a49d5fb3dc25ac6b412d72cbd9ede0e.jpg","exports":[{"format":"ipynb","filename":"ibtrack_preprocessing.ipynb","url":"/ml-hurricane-intensity/build/ibtrack_preprocessin-7caa0b54be657a100001d5a9c5cb4f47.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"image","url":"/ml-hurricane-intensity/build/2-Scenarios-used-by--6a49d5fb3dc25ac6b412d72cbd9ede0e.jpg","alt":"Hurricane Spaghetti Model Tracks (https://smartcorp.com/blog/what-silicon-valley-bank-can-learn-from-supply-chain-planning/attachment/2-scenarios-used-by-the-national-weather-service-to-predict-hurricane-tracks/)","width":"300px","align":"center","key":"NnY8qR0e3U","urlSource":"../2-Scenarios-used-by-the-National-Weather-Service-to-predict-hurricane-tracks.jpg"}],"key":"PECdiDbNB8"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"C5Lskp7Fkt"}],"key":"Kp489GNgyy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yCBoRv2wRL"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"MHHOZzw8IX"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The first step of any machine learning algorithm is to first load in, filter, and then process the necessary data. Here, we will load in the hurricane track data from IBTRACKS and then filter the tracks by requirements that we will set.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"tnBzZq84Xe"}],"key":"V47PX4QkEz"}],"key":"lF4738qrgE"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wY3vHWsd8Z"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"qYgHtHVJxv"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hcPUcQlDR1"}],"key":"RE6o4MGSwt"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yIKIpLbvDv"}],"key":"QhMUUyBZub"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pgbcdyyeAo"}],"key":"NjcxUTXkSL"}],"key":"lq77iU1RA4"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Intro to NUMPY","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"O7Y4o4DVtH"}],"urlSource":"https://foundations.projectpythia.org/core/numpy/","key":"UXmnJnYtPX"}],"key":"D9lUcgpNg0"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"KqSdyDMlUu"}],"key":"wsc6eL00eP"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[],"key":"tP1SX3AtmU"}],"key":"q7d6A17kS6"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy/","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Intro to PANDAS","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"gr2ICArfQ1"}],"urlSource":"https://foundations.projectpythia.org/core/numpy/","key":"Rr5TDwTwEs"}],"key":"FSEejtHJBI"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"biJnV0cPkE"}],"key":"Rf674yIQ5M"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[],"key":"QK7Bhgfzm3"}],"key":"Dg2UDBXNN7"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/xarray/","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to XARRAY","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"WIUR0IdSSr"}],"urlSource":"https://foundations.projectpythia.org/core/xarray/","key":"cWxUBzxfJa"}],"key":"hES3sMVrhb"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"cxvJ7m7fa7"}],"key":"fGzxycvQv0"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[],"key":"j409KEOqCI"}],"key":"WoBy67ueWU"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Project management","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"neCBoZXdOv"}],"key":"HCO03bRQQI"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"MA9hyyFI79"}],"key":"asvfl7GRCs"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[],"key":"jc9EKvoKN9"}],"key":"VPWcqrp8Hb"}],"key":"px2LCMp5xQ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"J3LvUr9ZaW"}],"key":"QXakuuUtbS"},{"type":"text","value":": estimate in minutes. For a rough idea, use 5 mins per subsection, 10 if longer; add these up for a total. Safer to round up and overestimate.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"LImremvlIm"}],"key":"pyQ1oLKt9X"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"strong","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"System requirements","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Uv3lFg5QFW"}],"key":"jXD67UYbjs"},{"type":"text","value":":","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"hFo7CFEZl3"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":12,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Populate with any system, version, or non-Python software requirements if necessary","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"NxPKQvXjxK"}],"key":"CGfB3Lq5PQ"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Otherwise use the concepts table above and the Imports section below to describe required packages as necessary","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"cBRIaHTIjA"}],"key":"AmgNiaYS2c"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"If no extra requirements, remove the ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"i9XwYztP5j"},{"type":"strong","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"System requirements","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"pH13JyOCoi"}],"key":"SSF4yeykLJ"},{"type":"text","value":" point altogether","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"BoMz8NvTDR"}],"key":"LEZmVFMGVv"}],"key":"Dh0Df7VtSU"}],"key":"y75Bp5U9WE"}],"key":"iCSXADssoe"}],"key":"jAa6N3TXvF"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MsZtbkCITT"}],"key":"MdDAW3KyQF"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FktqzqZaKW"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"YK4bBxxI60"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Begin your body of content with another ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"cHRbANFUYe"},{"type":"inlineCode","value":"---","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"J4JufFkrbc"},{"type":"text","value":" divider before continuing into this section, then remove this body text and populate the following code cell with all necessary Python imports ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"b6JpgY80Le"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"up-front","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"mGggL6ezrZ"}],"key":"wT68LyRBVR"},{"type":"text","value":":","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Uz1lLjkuQs"}],"key":"wdrppHWwic"}],"key":"s3Sro1msgr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import xarray as xr \nfrom dask.distributed import Client\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport pandas as pd\nimport glob\nfrom global_land_mask import globe\nimport cartopy.feature as cfeature\nfrom matplotlib.path import Path\nimport matplotlib.patches as patches\nfrom matplotlib import patheffects","key":"u61sRLFGB1"},{"type":"output","id":"aSLGC_sXDH1AA0BH3e8qR","data":[],"key":"hhKpHr05u2"}],"key":"ct3CK6Bt7h"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Read in IBTRACKS data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"X25yvC0pee"}],"identifier":"read-in-ibtracks-data","label":"Read in IBTRACKS data","html_id":"read-in-ibtracks-data","implicit":true,"key":"MpuoaE0DYi"}],"key":"AR7ef3AYcQ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"First, read in the data as a csv file","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eaRgIPQQOl"}],"key":"ASU2ygHt9S"}],"key":"iXmHL5XsRq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ib_data = '../test_folder/ibtracs.NA.list.v04r00.csv'","key":"wIbb9FUuwY"},{"type":"output","id":"d_RaepmIkcvE9tO5SQaUl","data":[],"key":"hStSQf7p4a"}],"key":"sP5PRjzQNV"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Method to preprocess the track data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NsEWC2AsZM"}],"identifier":"method-to-preprocess-the-track-data","label":"Method to preprocess the track data","html_id":"method-to-preprocess-the-track-data","implicit":true,"key":"Qw5GZi6dOk"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The following method will set custom ranges for the time period and spatial domain of analysis.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"GypVxUpfcZ"}],"key":"uC3A6Jc7mB"}],"key":"JymECsOn4H"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def process_ibrack(ib_loc, periods=[2000,2005]):\n\n    #Read in the IBTRACKS data\n    read_ib_data = pd.read_csv(ib_loc,keep_default_na=False)\n    \n    #Get the units for each column in read_ib_data\n    units = read_ib_data.iloc[0,:]\n\n    #Get data or the remainder of read_ib_data\n    ib_original_dft = read_ib_data.iloc[1:,:]\n\n    #Set a custom date and time range based on user choosing\n    ib_original_dft['datetime'] = pd.to_datetime(ib_original_dft['ISO_TIME'],format='%Y-%m-%d %H:%M:%S')\n    year_mask = (ib_original_dft['datetime'] > f'{periods[0]}-1-1') & (ib_original_dft['datetime'] <= f'{periods[1]}-11-30')\n    ib_new_period = ib_original_dft[year_mask][ib_original_dft['BASIN'] == 'NA']\n\n    #Only use cyclones over the North Atlantic basin\n    #This can be changed to include more cyclones outside of the Northeast Atlantic\n    def only_na_basin(df):\n        lon_wise = df.sort_values(by='datetime')\n        if lon_wise['LON'].iloc[0] > -55:\n            return df\n        else:\n            return None\n\n    #Get the number of time steps in each cyclone, or event\n    only_neatlantic = ib_new_period.groupby('SID').apply(only_na_basin).reset_index(drop=True)\n    counts = only_neatlantic.groupby('SID').count().iloc[:,0]\n    \n    #Get cyclones that last at least 12 time steps\n    counts_12 = counts[counts > 12].index\n    persist_storms = ib_new_period[ib_new_period['SID'].isin(counts_12)]\n    persist_storms['month']= persist_storms['datetime'].dt.month\n    \n    # mask out land points\n    def mask_lands(df):\n        ordered_df = df.sort_values(by='datetime')\n        lat = ordered_df['LAT']\n        lon = ordered_df['LON']\n        ocean_mask = pd.Series(globe.is_ocean(lat=lat,lon=lon))\n        idx_false = ocean_mask.idxmin()\n        if idx_false == 0:\n            return df\n        else:\n            land_mask = ocean_mask.iloc[:idx_false]\n            final_masked = ordered_df.iloc[:idx_false,:]\n            return final_masked\n   \n    # filter extratropical parts of the storm tracks\n    def filter_ET(df):\n        ordered_df = df.sort_values(by='datetime')\n        lat_filter = ordered_df['LAT'] <= 35\n        filter_df = ordered_df[lat_filter]\n        return filter_df\n    \n    exclude_et = persist_storms.groupby('SID').apply(filter_ET).reset_index(drop=True)\n\n    final_dft = exclude_et.groupby('SID').apply(mask_lands).reset_index(drop=True)\n\n    return final_dft","key":"xGR3QfHkwp"},{"type":"output","id":"9cDswF49559cxQy1x_iDy","data":[],"key":"lHotfz1W58"}],"key":"LCs2tIpK6R"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Process IBTRACKS data using the above methods","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QUwAGEuLve"}],"identifier":"process-ibtracks-data-using-the-above-methods","label":"Process IBTRACKS data using the above methods","html_id":"process-ibtracks-data-using-the-above-methods","implicit":true,"key":"OcjPwGQE0P"}],"key":"kTrZJxI6QB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ib_data_processed = process_ibrack(ib_data,periods=[2000,2005])\nib_data_processed['LAT'] = ib_data_processed['LAT'].astype(float)\nib_data_processed['LON'] = ib_data_processed['LON'].astype(float)\nib_data_processed['USA_WIND'] = ib_data_processed['USA_WIND'].astype(float)\nib_data_processed['datetime'] = pd.to_datetime(ib_data_processed['datetime'],format='%Y-%m-%d %H:%M:%S')\nib_data_processed['SID'] = ib_data_processed['SID'].astype(str)","key":"YPwExSvz82"},{"type":"output","id":"2oeJjg1k3VOONIfrJxa68","data":[{"output_type":"stream","name":"stderr","text":"/tmp/ipykernel_3792/278484491.py:4: DtypeWarning: Columns (1,2,8,9,14,19,20,23,24,161,162) have mixed types. Specify dtype option on import or set low_memory=False.\n  read_ib_data = pd.read_csv(ib_loc,keep_default_na=False)\n"},{"output_type":"stream","name":"stderr","text":"/tmp/ipykernel_3792/278484491.py:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  ib_original_dft['datetime'] = pd.to_datetime(ib_original_dft['ISO_TIME'],format='%Y-%m-%d %H:%M:%S')\n/tmp/ipykernel_3792/278484491.py:15: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n  ib_new_period = ib_original_dft[year_mask][ib_original_dft['BASIN'] == 'NA']\n/tmp/ipykernel_3792/278484491.py:27: FutureWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  only_neatlantic = ib_new_period.groupby('SID').apply(only_na_basin).reset_index(drop=True)\n/tmp/ipykernel_3792/278484491.py:33: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  persist_storms['month']= persist_storms['datetime'].dt.month\n/tmp/ipykernel_3792/278484491.py:56: FutureWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  exclude_et = persist_storms.groupby('SID').apply(filter_ET).reset_index(drop=True)\n/tmp/ipykernel_3792/278484491.py:58: FutureWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  final_dft = exclude_et.groupby('SID').apply(mask_lands).reset_index(drop=True)\n"}],"key":"mBKX2oM6jH"}],"key":"dgpfaatJ5d"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Organize the edited IBTRACKS file","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"f1saigI3vs"}],"identifier":"organize-the-edited-ibtracks-file","label":"Organize the edited IBTRACKS file","html_id":"organize-the-edited-ibtracks-file","implicit":true,"key":"mvj16fvAFX"}],"key":"MLn3qjyPa7"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"hint","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Hint","key":"LxfhwN5tFI"}],"key":"N9qfyTxBYL"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Up until now, we have primarily been grouping the IBTRACKS data using SID. Starting in this block, we will begin grouping the IBTRACKS data by id. This is done since SID may erroneously connect some cyclone tracks at adjacent time steps, while id appears to keep them separate.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"dXHtVOIg0Q"}],"key":"oyPeqv24oA"}],"key":"xjisnOickK"}],"key":"XJ7LqF5h51"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ib_data_processed['id'] = ib_data_processed['SID'].astype('category')\nib_data_processed['id'] = ib_data_processed['id'].cat.codes\nreq_cols = ['datetime','LAT','LON','USA_WIND','id']\n\n# groupby datetime 6h \nib_data_processed['datetime'] = ib_data_processed['datetime'].dt.floor('6h')\n\nib_data_processed_6h = ib_data_processed[req_cols].groupby('datetime').mean().reset_index()\n\n# copy the SID based on the id\n\nib_data_processed_6h['SID'] = ib_data_processed.groupby('datetime')['SID'].first().values","key":"WMOrrcPGSf"},{"type":"output","id":"bVXfcF2ZJpOCneP3g14bD","data":[],"key":"S7cjwLE47X"}],"key":"OOWSHWx4XA"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"See the organized and edited IBTRACKS file","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jmOddZQC9M"}],"identifier":"see-the-organized-and-edited-ibtracks-file","label":"See the organized and edited IBTRACKS file","html_id":"see-the-organized-and-edited-ibtracks-file","implicit":true,"key":"K3xDzOeBEy"}],"key":"iYXrAmzFh3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ib_data_processed_6h","key":"lKmgP76rmZ"},{"type":"output","id":"Qurl6H8W6Ly-OXEmzb6xu","data":[{"output_type":"execute_result","execution_count":6,"metadata":{},"data":{"text/plain":{"content":"                datetime        LAT       LON  USA_WIND    id            SID\n0    2000-06-23 00:00:00   9.515070 -20.08375      26.0   0.0  2000175N09340\n1    2000-06-23 06:00:00   9.667420 -21.37375      30.0   0.0  2000175N09340\n2    2000-06-23 12:00:00   9.990000 -23.07115      30.0   0.0  2000175N09340\n3    2000-06-23 18:00:00  10.193600 -24.93630      30.0   0.0  2000175N09340\n4    2000-06-24 00:00:00  10.046155 -26.60755      30.0   0.0  2000175N09340\n...                  ...        ...       ...       ...   ...            ...\n1158 2005-11-28 06:00:00  30.004350 -24.02575      60.0  46.0  2005324N27312\n1159 2005-11-28 12:00:00  30.210150 -20.76440      60.0  46.0  2005324N27312\n1160 2005-11-28 18:00:00  30.180200 -17.31015      58.5  46.0  2005324N27312\n1161 2005-11-29 00:00:00  30.251750 -13.69805      53.5  46.0  2005324N27312\n1162 2005-11-29 06:00:00  30.700000 -10.90000      50.0  46.0  2005324N27312\n\n[1163 rows x 6 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>datetime</th>\n      <th>LAT</th>\n      <th>LON</th>\n      <th>USA_WIND</th>\n      <th>id</th>\n      <th>SID</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2000-06-23 00:00:00</td>\n      <td>9.515070</td>\n      <td>-20.08375</td>\n      <td>26.0</td>\n      <td>0.0</td>\n      <td>2000175N09340</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2000-06-23 06:00:00</td>\n      <td>9.667420</td>\n      <td>-21.37375</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>2000175N09340</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2000-06-23 12:00:00</td>\n      <td>9.990000</td>\n      <td>-23.07115</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>2000175N09340</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2000-06-23 18:00:00</td>\n      <td>10.193600</td>\n      <td>-24.93630</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>2000175N09340</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2000-06-24 00:00:00</td>\n      <td>10.046155</td>\n      <td>-26.60755</td>\n      <td>30.0</td>\n      <td>0.0</td>\n      <td>2000175N09340</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1158</th>\n      <td>2005-11-28 06:00:00</td>\n      <td>30.004350</td>\n      <td>-24.02575</td>\n      <td>60.0</td>\n      <td>46.0</td>\n      <td>2005324N27312</td>\n    </tr>\n    <tr>\n      <th>1159</th>\n      <td>2005-11-28 12:00:00</td>\n      <td>30.210150</td>\n      <td>-20.76440</td>\n      <td>60.0</td>\n      <td>46.0</td>\n      <td>2005324N27312</td>\n    </tr>\n    <tr>\n      <th>1160</th>\n      <td>2005-11-28 18:00:00</td>\n      <td>30.180200</td>\n      <td>-17.31015</td>\n      <td>58.5</td>\n      <td>46.0</td>\n      <td>2005324N27312</td>\n    </tr>\n    <tr>\n      <th>1161</th>\n      <td>2005-11-29 00:00:00</td>\n      <td>30.251750</td>\n      <td>-13.69805</td>\n      <td>53.5</td>\n      <td>46.0</td>\n      <td>2005324N27312</td>\n    </tr>\n    <tr>\n      <th>1162</th>\n      <td>2005-11-29 06:00:00</td>\n      <td>30.700000</td>\n      <td>-10.90000</td>\n      <td>50.0</td>\n      <td>46.0</td>\n      <td>2005324N27312</td>\n    </tr>\n  </tbody>\n</table>\n<p>1163 rows × 6 columns</p>\n</div>","content_type":"text/html"}}}],"key":"it0qnKchO7"}],"key":"NORa5dhPT3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot the track data we have edited and organized","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KedB7KteCJ"}],"identifier":"plot-the-track-data-we-have-edited-and-organized","label":"Plot the track data we have edited and organized","html_id":"plot-the-track-data-we-have-edited-and-organized","implicit":true,"key":"ZXAbHZNwDG"}],"key":"MLDYkDVteL"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"xV6YcW58CN"}],"key":"eht3xmvsvC"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"You may notice some instances in which the cyclone track hits the top of the boundary, and then appears to erroneously move horizontally over a long distance. Not to worry! This occurs since we discount all cyclones that move north of our boundary. Thus, the plot below will connect the two cyclone positions before and after it leaves the domain. The data is however correct.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"X6xikN93HG"}],"key":"flq8dBIKvD"}],"key":"Lqi1lOE1na"}],"key":"UPtu0WhN9L"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_tracks(filtered_ib):\n    filtered_ib['datetime'] = pd.to_datetime(filtered_ib['datetime'])\n\n    events = filtered_ib.groupby('id')\n    \n    fig,ax = plt.subplots(figsize=(20,10),subplot_kw={\"projection\": ccrs.PlateCarree()})\n    \n    ax.add_feature(cfeature.COASTLINE)\n\n    ax.add_feature(cfeature.BORDERS)\n\n\n    ax.coastlines()\n    \n    ax.add_feature(cfeature.LAND)\n    ax.add_feature(cfeature.OCEAN)\n    \n    ax.gridlines(draw_labels=True, dms=True, x_inline=False, y_inline=False)\n  \n    for event_num , event in events:\n        lon = event['LON'].values\n        lat = event['LAT'].values\n\n        vertices = [(lo, la) for lo, la in zip(lon, lat)]\n        codes = [Path.MOVETO]\n        [codes.append(Path.LINETO) for index in range(0, len(event) - 1)]\n\n        path = Path(vertices, codes)\n        \n        patch = patches.PathPatch(path, lw = 1, fc = 'none', path_effects = [patheffects.withStroke(linewidth=2.5, foreground=\"black\")], zorder = 5)\n\n        ax.add_patch(patch)\n        \n        ax.set_xlim(-100, 0)\n        ax.set_ylim(5, 35)\n    return fig,ax\n\nplot_tracks(ib_data_processed_6h)","key":"KRgCv9VKsr"},{"type":"output","id":"K4kXOjN6wTT-WufuoSi1X","data":[{"output_type":"execute_result","execution_count":7,"metadata":{},"data":{"text/plain":{"content":"(<Figure size 2000x1000 with 1 Axes>, <GeoAxes: >)","content_type":"text/plain"}}},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-dev/lib/python3.12/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_land.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-dev/lib/python3.12/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_ocean.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-dev/lib/python3.12/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/cookbook-dev/lib/python3.12/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_cultural/ne_50m_admin_0_boundary_lines_land.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 2000x1000 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"a74ea011e4cdf33427e805163e7fe677","path":"/ml-hurricane-intensity/build/a74ea011e4cdf33427e805163e7fe677.png"}}}],"key":"dWXh75uiI3"}],"key":"wTr3pxzxRd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ib_data_processed_6h.to_csv('../test_folder/ib_data_processed_6h.csv')","key":"JBerPs2KSD"},{"type":"output","id":"OkfubkzjhMvp8ygsxAH-e","data":[],"key":"K4VnZ7f0Aq"}],"key":"rE8kcLNMFe"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FSUzcjntOl"}],"key":"YgX5WApwfL"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pAjB6b5jJd"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"m7pxXphQdh"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Here, we appropriately edited the cyclone track data over our space and time domain of interest. We have also created an output file that will be useful for eventual creation and training of our machine learning model.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"KDzwMTGuPE"}],"key":"GTmxbIDsGT"},{"type":"heading","depth":3,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"p64S8Yq1Y5"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"mSsD3sILJA"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Next we will edit the ERA5 data. In particular, we will take our variables of interest that will be used to train the AI model and organize them for ingestion into the machine learning model.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zFNI6eTRVg"}],"key":"sDAmHzwW0s"}],"key":"kQh6YpkSSF"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J0nbPiPeq0"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"EmfJgA69vC"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Image link: ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"NpCcM7hmpz"},{"type":"link","url":"https://smartcorp.com/blog/what-silicon-valley-bank-can-learn-from-supply-chain-planning/attachment/2-scenarios-used-by-the-national-weather-service-to-predict-hurricane-tracks/","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"https://​smartcorp​.com​/blog​/what​-silicon​-valley​-bank​-can​-learn​-from​-supply​-chain​-planning​/attachment​/2​-scenarios​-used​-by​-the​-national​-weather​-service​-to​-predict​-hurricane​-tracks/","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"TZ0pi9lrkO"}],"urlSource":"https://smartcorp.com/blog/what-silicon-valley-bank-can-learn-from-supply-chain-planning/attachment/2-scenarios-used-by-the-national-weather-service-to-predict-hurricane-tracks/","key":"bI0UvKTtaU"}],"key":"ZX6dqAXlj0"}],"key":"yUVStI4sRI"}],"key":"CYQNLdKOWi"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"How to Cite This Cookbook","url":"/notebooks/how-to-cite","group":"Preamble"},"next":{"title":"ERA5 Data Preprocessing","url":"/notebooks/era5-preprocessing","group":"Data Preprocessing"}}},"domain":"http://localhost:3000"}