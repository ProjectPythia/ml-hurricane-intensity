{"version":2,"kind":"Notebook","sha256":"b88d1877975c19fba745a0403466f9e432bbbc33918fd987ca7987498c04adb4","slug":"notebooks.era5-preprocessing","location":"/notebooks/era5_preprocessing.ipynb","dependencies":[],"frontmatter":{"title":"ERA5 Data Preprocessing","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"nma","language":"python"},"authors":[{"nameParsed":{"literal":"Nirmal Alex, Matthew Lynne","given":"Matthew Lynne","family":"Nirmal Alex"},"name":"Nirmal Alex, Matthew Lynne","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/ProjectPythia/ml-hurricane-intensity","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/ProjectPythia/ml-hurricane-intensity/blob/main/notebooks/era5_preprocessing.ipynb","exports":[{"format":"ipynb","filename":"era5_preprocessing.ipynb","url":"/ml-hurricane-intensity/build/era5_preprocessing-468af5434339fe83077a2c5d9298b486.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JBEkuSqHQP"}],"key":"dfvfkvyiDC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tkiN3Y07uW"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"rriNCmNAW3"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Here, we will use the processed IBTRACKS data to select ERA5 environmental variables associated with each cyclone.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"DvY5fbb4yj"}],"key":"qJbgMMNkMX"}],"key":"pVozxsP6qI"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PfBXm1E604"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"qXm47zEDuv"},{"type":"table","position":{"start":{"line":2,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"wcllMurZoX"}],"key":"ezuVSRoybg"},{"type":"tableCell","header":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ZPGs0bQrAi"}],"key":"TGHH2Rkd1q"},{"type":"tableCell","header":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"DYxE3NLaZA"}],"key":"zrm3z3xnRd"}],"key":"Sn3x0hGyo3"},{"type":"tableRow","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy/","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Intro to NUMPY","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"agxlszLix1"}],"urlSource":"https://foundations.projectpythia.org/core/numpy/","key":"f5zc3eyUQs"}],"key":"oSjPZpW8Bh"},{"type":"tableCell","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"nmuzTN4aSG"}],"key":"S6xDomQp96"},{"type":"tableCell","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[],"key":"wWn6j93BwE"}],"key":"KnufHkRQ7P"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Intro to PANDAS","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"BGJw9YT1mw"}],"urlSource":"https://foundations.projectpythia.org/core/numpy/","key":"Jiop60BbpI"}],"key":"XsJB7SaztO"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"DXNsE3r306"}],"key":"COQZdoKjB9"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[],"key":"P6654fpwVY"}],"key":"OOmvaEcBUa"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/xarray/","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Intro to XARRAY","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Sk9mw5nReV"}],"urlSource":"https://foundations.projectpythia.org/core/xarray/","key":"ymBAyOKn2q"}],"key":"k5pD8Vra0m"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"NcaXSsySx3"}],"key":"CRf5KagpxX"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[],"key":"r5DjjK5O2t"}],"key":"Vfm2ihJos0"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Project management","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"VerlcoZ9sq"}],"key":"cK5iZmdXl9"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"qOW6DIGahW"}],"key":"rURDJLyuAv"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[],"key":"BsGElwHx9g"}],"key":"GzBWQ17nGa"}],"key":"TX14sIvlSw"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"sVvvYFthQW"}],"key":"HZ2KK8h7FJ"},{"type":"text","value":": ~15 minntes","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"i3rpfu8SPT"}],"key":"B2f3wyTEj4"}],"key":"iSyVetOqQi"}],"key":"mKCCS4gsqD"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kwtIQJe1V6"}],"key":"achFABy2L5"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nT9LNYARVs"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"gWYge5LHgd"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Begin your body of content with another ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"O7dlC84bwk"},{"type":"inlineCode","value":"---","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"PGIf96Uqjw"},{"type":"text","value":" divider before continuing into this section, then remove this body text and populate the following code cell with all necessary Python imports ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"iCKwXje6lt"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"up-front","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"vNAPYcSnN0"}],"key":"qZwiahCiaW"},{"type":"text","value":":","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"IKJoXGoxZe"}],"key":"Fv9rp9occB"}],"key":"R3MIfkTN0e"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import xarray as xr \nfrom dask.distributed import Client\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport pandas as pd\nimport glob\nfrom global_land_mask import globe\nimport cartopy.feature as cfeature\nfrom matplotlib.path import Path\nimport matplotlib.patches as patches\nfrom matplotlib import patheffects\nimport numpy as np\nimport dask","key":"bBlHoUQMJa"},{"type":"output","id":"xBaBxfMfG0sOyIk7gLdb0","data":[],"key":"XM2vpnKOLP"}],"key":"fEzvn2DO06"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Edit and pad ERA5 data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DZ2phNkBbp"}],"identifier":"edit-and-pad-era5-data","label":"Edit and pad ERA5 data","html_id":"edit-and-pad-era5-data","implicit":true,"key":"EOxRzFBdcM"}],"key":"MYOthSamkk"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In this section, we will select ERA5 data within a 5x5 latitude/longitude grid centered at each cyclone center at each time step in our dataset. We will then have to pad the data to account for instances in which grid cells occur over land.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AFExgjCxhS"}],"key":"b6UjPYQRMA"}],"key":"Q1naQeiIL0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"input_dsets = xr.open_dataset('../test_folder/final_proc_5yr_6h.nc')","key":"pw2PxctO6M"},{"type":"output","id":"rO-VxyUs3KnOwzaBSY-rh","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mValueError\u001b[39m                                Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[2]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m input_dsets = \u001b[43mxr\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_dataset\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43m../test_folder/final_proc_5yr_6h.nc\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-dev/lib/python3.12/site-packages/xarray/backends/api.py:696\u001b[39m, in \u001b[36mopen_dataset\u001b[39m\u001b[34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, create_default_indexes, inline_array, chunked_array_type, from_array_kwargs, backend_kwargs, **kwargs)\u001b[39m\n\u001b[32m    693\u001b[39m     kwargs.update(backend_kwargs)\n\u001b[32m    695\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m engine \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m696\u001b[39m     engine = \u001b[43mplugins\u001b[49m\u001b[43m.\u001b[49m\u001b[43mguess_engine\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    698\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m from_array_kwargs \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    699\u001b[39m     from_array_kwargs = {}\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/cookbook-dev/lib/python3.12/site-packages/xarray/backends/plugins.py:194\u001b[39m, in \u001b[36mguess_engine\u001b[39m\u001b[34m(store_spec)\u001b[39m\n\u001b[32m    186\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    187\u001b[39m     error_msg = (\n\u001b[32m    188\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mfound the following matches with the input file in xarray\u001b[39m\u001b[33m'\u001b[39m\u001b[33ms IO \u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    189\u001b[39m         \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[33mbackends: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcompatible_engines\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m. But their dependencies may not be installed, see:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33m\"\u001b[39m\n\u001b[32m    190\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mhttps://docs.xarray.dev/en/stable/user-guide/io.html \u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33m\"\u001b[39m\n\u001b[32m    191\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m    192\u001b[39m     )\n\u001b[32m--> \u001b[39m\u001b[32m194\u001b[39m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(error_msg)\n\n\u001b[31mValueError\u001b[39m: did not find a match in any of xarray's currently installed IO backends ['netcdf4', 'h5netcdf', 'scipy']. Consider explicitly selecting one of the installed engines via the ``engine`` parameter, or installing additional IO dependencies, see:\nhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html\nhttps://docs.xarray.dev/en/stable/user-guide/io.html","ename":"ValueError","evalue":"did not find a match in any of xarray's currently installed IO backends ['netcdf4', 'h5netcdf', 'scipy']. Consider explicitly selecting one of the installed engines via the ``engine`` parameter, or installing additional IO dependencies, see:\nhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html\nhttps://docs.xarray.dev/en/stable/user-guide/io.html"}],"key":"cMHNg2hGGz"}],"key":"pWg3aWiLSY"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"hint","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Hint","key":"rjRcqyxO2G"}],"key":"qEcHVHCb62"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The coriolis parameter is a function of latitude only. However, cyclones tend to move in preferred directions based on latitude and in turn the magnitude of this parameter. This is why the coriolis parameter is chosen to be one of the predictor variables of our AI model. This variable is calculated below.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"UfdW3pymEQ"}],"key":"yfkAuVpaSc"}],"key":"WHUKSkS5UV"}],"key":"w1OatEHBSG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# calculating coriolis parameter \ncor_parms =  2 * 7.29 * 1e-5 * np.sin(np.radians(input_dsets['latitude']))\n\ninput_dsets['cor_params'] = xr.DataArray(cor_parms,\n                                            name='cor_params'\n                                            ).broadcast_like(input_dsets['r'])","key":"sy9q0WAKeJ"},{"type":"output","id":"ImXopMhw4cXX8l3zySngD","data":[],"key":"aa9t2rsJje"}],"key":"hzBtvZUGiu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ib_data_processed_6h = pd.read_csv('../test_folder/ib_data_processed_6h.csv')","key":"zGBcTPEP8F"},{"type":"output","id":"eb4wglotbP4G9utoJomro","data":[],"key":"paC3iGxTZz"}],"key":"NlZfXmuRzi"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"hint","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Hint","key":"Ca1ZQK1a1i"}],"key":"UOQCTkodM7"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"When training our AI model, we want all cyclones to have the same number of time steps. Realistically this does not happen in the real world. Therefore, we must pad each cyclone track with “dummy” values until the lifespan of the cyclone is the same as that of the longest lasting cyclone in our dataset.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"LTeY1jIsj1"}],"key":"o4wJH28qvH"}],"key":"inhkscMLZq"}],"key":"JfrL5YoqVh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"final_data = []\nmax_len = ib_data_processed_6h.groupby('id').size().max()  # assuming max length is 3 hours per storm","key":"CkBQabOcSV"},{"type":"output","id":"qEUFmg9xWI3d4GXYLP9e1","data":[],"key":"L1duWXWq5X"}],"key":"DnD2ssp0KI"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Edit predictors for each cyclone","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dO6rfaIt3l"}],"identifier":"edit-predictors-for-each-cyclone","label":"Edit predictors for each cyclone","html_id":"edit-predictors-for-each-cyclone","implicit":true,"key":"FJQoaTLHvO"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Here we can move on to our second objective, to explicitly edit the predictors that will be used by the machine learning model. We wish to center each cyclone within a 5x5 grid at each time step. We will then select the data at each grid cell for each variable of interest including sea surface temperatures, 500 hPa relatice humidity, pressure, vertical wind shear, 850 hPa relative vorticity, and the coriolis parameter.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"RpthRv1v9h"}],"key":"SQPKSloHmp"}],"key":"MTFhx5AySp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"for id_number,group in ib_data_processed_6h.groupby('id'):\n    events_data = []\n    for index,row in group.iterrows():\n        lat = int(row['LAT'])\n        lon = int(row['LON'])\n        time = row['datetime']\n        \n        #We want data in a 5x5 latitude/longitude grid centered on the cyclone latitude/longitude\n        latmin = lat - 2\n        latmax = lat + 2\n        lonmin = lon - 2\n        lonmax = lon + 2\n        sel_data = input_dsets.sel(latitude=slice(latmax, latmin), longitude=slice(lonmin, lonmax), time=time)\n        \n            \n        final_xr = sel_data.rename({'latitude': 'y', 'longitude': 'x'})\n        final_xr['x'] = np.arange(0,final_xr.sizes['x'])\n        final_xr['y'] = np.arange(0,final_xr.sizes['y'])\n        \n        # fill NaN values with zeros along the x and y dimensions\n        for jj in final_xr.data_vars:\n            final_xr[jj].fillna(0)  # Fill NaN values\n        \n        #Recall that we are trying to predict the wind speed.\n        #Hence, our target is USA_WIND\n        final_xr['target'] = row['USA_WIND']    \n        events_data.append(final_xr)\n    \n    final_event = xr.concat(events_data,dim='time')\n    \n    #Pad data with zeros up to the maximum time\n    if len(final_event.time) <= max_len:\n        new_time = pd.date_range(start=final_event['time'].min().values, periods=max_len ,freq='6h')\n        padded_data = final_event.reindex(time=new_time, fill_value=0.0)\n    else:\n        padded_data = final_event\n    \n    lead_time = np.arange(0,max_len*6 ,6)\n    padded_data['lead'] = ('time', lead_time)\n    padded_data = padded_data.assign_coords({'lead': padded_data['lead'].astype(int)})\n    \n    # swap time and lead dimensions\n    padded_data = padded_data.swap_dims({'time': 'lead'})\n    padded_data['id'] = id_number \n    padded_data = padded_data.set_coords('id')\n    \n    # convert the time dimension to a variable\n    final_data.append(padded_data)","key":"cp9Al2aeqD"},{"type":"output","id":"2J4QFmtAJPibZRB_IOuv7","data":[],"key":"RzmLjlHcJu"}],"key":"RnV4KCUD1n"},{"type":"block","kind":"notebook-code","data":{"scrolled":true},"children":[{"type":"code","lang":"python","executable":true,"value":"final_input_padded = xr.concat(final_data, dim='id')\nfinal_input_padded","key":"OO4QO7brm2"},{"type":"output","id":"7bvOJjACxwJ_EC1LRcKcB","data":[],"key":"iac7QvpU52"}],"key":"P830Zwbld8"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"bFvArNIcgW"}],"key":"MLuUgONp3P"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Recall that our “target” variable, or the variable we want to predict is the wind speed. We take the wind speed from ERA5 to initially train our model.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"HNKoBLKk7X"}],"key":"SgIOBpmuvw"}],"key":"HpwoK78TVK"}],"key":"p6qcayH68q"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"\nfinal_input_padded.to_netcdf('../test_folder/input_predictands.nc')","key":"gWm6MBEo6v"},{"type":"output","id":"0H1FH7EUL5faBzmCyDiTu","data":[],"key":"gAOq97zw9c"}],"key":"GWL0tbbxc7"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"P89SUtHXZo"}],"key":"M6XWUjB1Xb"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RLQ9R0Wwqo"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"vVDHPepjMS"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Here, we selected and edited ERA5 data associated with the cyclones at each time step in our dataset. This involved gathering data for each variable of interest within a 5x5 grid. We also needed to be sure to mask out all grid cells corresponding to land as our AI model will only take into account grid cells over water.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"USC5jM8i3i"}],"key":"Ek4DMeId9B"},{"type":"heading","depth":3,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"JHfRpxDSiu"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"t1akWg6dHO"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We have now officially preprocessed all of our data! Next, we will test each variable of interest to get a sense of how well it can act as a predictor for cyclone intensity. After this, we will begin setting up our AI model!","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"bktJzWCyOs"}],"key":"gewLJsgbdk"}],"key":"FRFdj2Mpgg"}],"key":"Ft5Cys8Swe"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Preprocess IBTRACK data","url":"/notebooks/ibtrack-preprocessing","group":"Data Preprocessing"},"next":{"title":"Model Setup","url":"/notebooks/model","group":"Model"}}},"domain":"http://localhost:3000"}